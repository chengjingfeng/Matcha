import { createElement, createRef, PureComponent } from 'react';
import PropTypes from 'prop-types';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var ScrollIntoViewIfNeeded = function (_PureComponent) {
  inherits(ScrollIntoViewIfNeeded, _PureComponent);

  function ScrollIntoViewIfNeeded() {
    classCallCheck(this, ScrollIntoViewIfNeeded);

    var _this = possibleConstructorReturn(this, (ScrollIntoViewIfNeeded.__proto__ || Object.getPrototypeOf(ScrollIntoViewIfNeeded)).call(this));

    _this.handleScrollIntoViewIfNeeded = function () {
      var options = _this.props.options;
      var node = _this.node.current;

      scrollIntoViewIfNeeded(node, options);
    };

    _this.node = createRef();
    return _this;
  }

  createClass(ScrollIntoViewIfNeeded, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var active = this.props.active;

      if (active) {
        this.handleScrollIntoViewIfNeeded();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(_ref) {
      var active = _ref.active;
      var isNowActive = this.props.active;

      if (!active && isNowActive) {
        this.handleScrollIntoViewIfNeeded();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          active = _props.active,
          elementType = _props.elementType,
          children = _props.children,
          options = _props.options,
          wrapperProps = objectWithoutProperties(_props, ['active', 'elementType', 'children', 'options']);

      return createElement(elementType, _extends({ ref: this.node }, wrapperProps), children);
    }
  }]);
  return ScrollIntoViewIfNeeded;
}(PureComponent);

ScrollIntoViewIfNeeded.propTypes = {
  active: PropTypes.bool,
  children: PropTypes.node.isRequired,
  elementType: PropTypes.string,
  // this shape should mirror the scroll-into-view-if-needed options
  options: PropTypes.shape({
    behavior: PropTypes.oneOfType([PropTypes.oneOf(['auto', 'smooth', 'instant']), PropTypes.func]),
    block: PropTypes.oneOf(['center', 'end', 'nearest', 'start']),
    inline: PropTypes.oneOf(['center', 'end', 'nearest', 'start']),
    scrollMode: PropTypes.oneOf(['always', 'if-needed']),
    boundary: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
    skipOverflowHiddenElements: PropTypes.bool
  })
};
ScrollIntoViewIfNeeded.defaultProps = {
  active: true,
  elementType: 'div',
  options: {
    behavior: 'smooth',
    scrollMode: 'if-needed'
  }
};

export default ScrollIntoViewIfNeeded;
//# sourceMappingURL=standalone.js.map
